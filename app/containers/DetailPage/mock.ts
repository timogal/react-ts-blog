const content = `
<p>在使用JPA的时候发现有的时候jpa并没有去执行total的查询语句，但还是返回了<code>totalElements</code>这个字段, 处于好奇，于是查了一波源码.<br><a id="more"></a><br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.data.jpa.repository.query.JpaQueryExecution#PagedExecution</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Executes the {<span class="doctag">@link</span> AbstractStringBasedJpaQuery} to return a</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@link</span> org.springframework.data.domain.Page} of entities.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PagedExecution</span> <span class="keyword">extends</span> <span class="title">JpaQueryExecution</span> </span>{</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Parameters&lt;?, ?&gt; parameters;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PagedExecution</span><span class="params">(Parameters&lt;?, ?&gt; parameters)</span> </span>{</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>.parameters = parameters;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">doExecute</span><span class="params">(<span class="keyword">final</span> AbstractJpaQuery repositoryQuery, <span class="keyword">final</span> Object[] values)</span> </span>{</span><br><span class="line">		ParameterAccessor accessor = <span class="keyword">new</span> ParametersParameterAccessor(parameters, values);</span><br><span class="line">		Query query = repositoryQuery.createQuery(values);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> PageableExecutionUtils.getPage(query.getResultList(), accessor.getPageable(),</span><br><span class="line">				() -&gt; count(repositoryQuery, values));</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(AbstractJpaQuery repositoryQuery, Object[] values)</span> </span>{</span><br><span class="line"></span><br><span class="line">		List&lt;?&gt; totals = repositoryQuery.createCountQuery(values).getResultList();</span><br><span class="line">		<span class="keyword">return</span> (totals.size() == <span class="number">1</span></span><br><span class="line">		    ? CONVERSION_SERVICE.convert(totals.get(<span class="number">0</span>), Long.class)</span><br><span class="line">		    : totals.size());</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>上面<code>PagedExecution</code>这个类是用于执行分页查询的Jpa执行器，<code>count</code>方法用于查询总条数，注意到这一行：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PageableExecutionUtils.getPage(query.getResultList(), accessor.getPageable(),</span><br><span class="line">                () -&gt; count(repositoryQuery, values))</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>第一个参数是查询的结果，第二个是传入的分页参数，第三个参数是<strong>获取总记录条数的方法</strong>，不是直接去查询总条数，我们来看看<code>PageableExecutionUtils.getPage</code>这个方法:</p>
<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.data.repository.support.PageableExecutionUtils</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a {<span class="doctag">@link</span> Page} based on the given {<span class="doctag">@code</span> content}, {<span class="doctag">@link</span> Pageable} and {<span class="doctag">@link</span> Supplier} applying</span></span><br><span class="line"><span class="comment"> * optimizations. The construction of {<span class="doctag">@link</span> Page} omits a count query if the total can be determined based on the</span></span><br><span class="line"><span class="comment"> * result size and {<span class="doctag">@link</span> Pageable}.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content must not be {<span class="doctag">@literal</span> null}.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageable must not be {<span class="doctag">@literal</span> null}.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> totalSupplier must not be {<span class="doctag">@literal</span> null}.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the {<span class="doctag">@link</span> Page}.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Page&lt;T&gt; <span class="title">getPage</span><span class="params">(List&lt;T&gt; content, Pageable pageable, LongSupplier totalSupplier)</span> </span>{</span><br><span class="line"></span><br><span class="line">	Assert.notNull(content, <span class="string">"Content must not be null!"</span>);</span><br><span class="line">	Assert.notNull(pageable, <span class="string">"Pageable must not be null!"</span>);</span><br><span class="line">	Assert.notNull(totalSupplier, <span class="string">"TotalSupplier must not be null!"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pageable.isUnpaged() || pageable.getOffset() == <span class="number">0</span>) {</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (pageable.isUnpaged() || pageable.getPageSize() &gt; content.size()) {</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> PageImpl&lt;&gt;(content, pageable, content.size());</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PageImpl&lt;&gt;(content, pageable, totalSupplier.getAsLong());</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (content.size() != <span class="number">0</span> &amp;&amp; pageable.getPageSize() &gt; content.size()) {</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PageImpl&lt;&gt;(content, pageable, pageable.getOffset() + content.size());</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> PageImpl&lt;&gt;(content, pageable, totalSupplier.getAsLong());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>注意看第三个参数<code>totalSupplier</code>(戳此处了解<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html" target="_blank" rel="noopener">Supplier</a>)的使用时机，就可以知道，以下两种情况下将不会使用<code>totalSupplier</code>：</p>
<ol>
<li>没有分页信息</li>
<li>当前查询结果的记录条数小于pageSize(页大小)</li>
</ol>
`;

export default {
  content,
  title: 'Spring Jpa执行分页count sql的时机',
  time: '2018-07-19',
  categories: [
    { id: 1, name: 'spring' },
    { id: 2, name: 'Java' }
  ],
  views: 120,
};
